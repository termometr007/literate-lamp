document.addEventListener('DOMContentLoaded', () => {
    // –ò–º–∏—Ç–∞—Ü–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ "–ú–æ–∏ –∑–∞–¥–∞—á–∏")
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ—Ç ID –∏ —Ä–æ–ª—å –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –æ—Ç Telegram Web App
    const currentUserId = '987654321'; // –ü—Ä–∏–º–µ—Ä ID –∞–¥–º–∏–Ω–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const currentUserRole = 'main_admin'; // 'main_admin', 'junior_admin', 'employee'

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–æ–ª–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    const isMainAdmin = currentUserRole === 'main_admin';
    const isJuniorAdmin = currentUserRole === 'junior_admin';
    const isAdmin = isMainAdmin || isJuniorAdmin; // –õ—é–±–æ–π –∞–¥–º–∏–Ω
    const isEmployee = currentUserRole === 'employee';

    // –≠–ª–µ–º–µ–Ω—Ç—ã DOM
    const companyLogo = document.getElementById('company-logo');
    const companyNameElem = document.getElementById('company-name');
    const settingsBtn = document.getElementById('settings-btn');
    const mainSectionsGrid = document.getElementById('main-sections-grid');
    const sectionsAdminActions = document.getElementById('sections-admin-actions');
    const createSectionBtn = document.getElementById('create-section-btn');
    const goBackSectionBtn = document.getElementById('go-back-section-btn');
    const adminNotesContent = document.getElementById('admin-notes-content');
    const downloadReportsBtn = document.getElementById('download-reports-btn');

    const homePage = document.getElementById('home-page');
    const sectionsPage = document.getElementById('sections-page');
    const tasksPage = document.getElementById('tasks-page');
    const analyticsPage = document.getElementById('analytics-page');
    const settingsPage = document.getElementById('settings-page');

    const bottomNavItems = document.querySelectorAll('.nav-item');
    const currentSectionNameElem = document.getElementById('current-section-name');
    const subSectionsList = document.getElementById('sub-sections-list');
    const itemsList = document.getElementById('items-list');
    const createSubSectionBtn = document.getElementById('create-sub-section-btn');
    const createItemBtn = document.getElementById('create-item-btn');
    const backFromSectionBtn = document.getElementById('back-from-section-btn');

    // –≠–ª–µ–º–µ–Ω—Ç—ã –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∞/–ø–æ–∑–∏—Ü–∏–∏
    const newSectionModal = document.getElementById('new-section-modal');
    const newModalTitle = document.getElementById('new-modal-title');
    const newSectionNameInput = document.getElementById('new-section-name-input');
    const confirmNewSectionBtn = document.getElementById('confirm-new-section-btn');
    const cancelNewSectionBtn = document.getElementById('cancel-new-section-btn');

    const editModal = document.getElementById('edit-modal');
    const editModalTitle = document.getElementById('edit-modal-title');
    const editNameInput = document.getElementById('edit-name-input');
    const editItemFields = document.getElementById('edit-item-fields');
    const editQuantityInput = document.getElementById('edit-quantity-input');
    const editMinQuantityInput = document.getElementById('edit-min-quantity-input');
    const confirmEditBtn = document.getElementById('confirm-edit-btn');
    const cancelEditBtn = document.getElementById('cancel-edit-btn');

    // –≠–ª–µ–º–µ–Ω—Ç—ã –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    const quantityModal = document.getElementById('quantity-modal');
    const quantityModalTitle = document.getElementById('quantity-modal-title');
    const quantityInput = document.getElementById('quantity-input');
    const addQuantityBtn = document.getElementById('add-quantity-btn');
    const subtractQuantityBtn = document.getElementById('subtract-quantity-btn');
    const cancelQuantityBtn = document.getElementById('cancel-quantity-btn');

    // –≠–ª–µ–º–µ–Ω—Ç—ã –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
    const recipientsModal = document.getElementById('recipients-modal');
    const recipientsList = document.getElementById('recipients-list');
    const confirmRecipientsBtn = document.getElementById('confirm-recipients-btn');
    const cancelRecipientsBtn = document.getElementById('cancel-recipients-btn');
    const recipientFilterTabs = document.querySelectorAll('.recipients-modal .filter-tab');
    const filterAdminsTab = document.getElementById('filter-admins-tab');

    // –≠–ª–µ–º–µ–Ω—Ç—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
    const contextMenu = document.getElementById('context-menu');
    const contextMenuItems = document.querySelectorAll('.context-menu-item');

    // –≠–ª–µ–º–µ–Ω—Ç—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–¥–∞—á
    const taskFilterTabs = document.querySelectorAll('.task-filter-tabs .filter-tab');
    const tasksList = document.getElementById('tasks-list');
    const createTaskBtn = document.getElementById('create-task-btn');

    // –≠–ª–µ–º–µ–Ω—Ç—ã –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–¥–∞—á
    const taskStatusModal = document.getElementById('task-status-modal');
    const closeTaskStatusModalBtn = document.getElementById('close-task-status-modal');
    const taskStatusOptionButtons = document.querySelectorAll('.task-status-modal .status-option-button');

    // –≠–ª–µ–º–µ–Ω—Ç—ã –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏
    const createTaskModal = document.getElementById('create-task-modal');
    const taskTitleInput = document.getElementById('task-title-input');
    const taskDescriptionInput = document.getElementById('task-description-input');
    const taskAssignedToSelect = document.getElementById('task-assigned-to-select');
    const confirmCreateTaskBtn = document.getElementById('confirm-create-task-btn');
    const cancelCreateTaskBtn = document.getElementById('cancel-create-task-btn');

    // –≠–ª–µ–º–µ–Ω—Ç—ã –∞–¥–º–∏–Ω-–∫–æ–Ω—Ç—Ä–æ–ª—è
    const adminControlsPanel = document.getElementById('admin-controls-panel');
    const logoUrlInput = document.getElementById('logo-url-input');
    const companyNameInput = document.getElementById('company-name-input');
    const applyCompanyChangesBtn = document.getElementById('apply-company-changes');
    const botLogoUrlInput = document.getElementById('bot-logo-url-input');
    const applyBotLogoChangesBtn = document.getElementById('apply-bot-logo-changes');
    const newAdminNoteInput = document.getElementById('new-admin-note-input');
    const addAdminNoteBtn = document.getElementById('add-admin-note-btn');
    const clearAdminNotesBtn = document.getElementById('clear-admin-notes-btn');

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    let currentSectionId = null;
    let currentItem = null; // –î–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
    let currentEditedElement = null; // –î–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    let longPressTimer; // –î–ª—è –¥–æ–ª–≥–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ —Ä–∞–∑–¥–µ–ª—ã/–ø–æ–∑–∏—Ü–∏–∏
    const LONG_PRESS_THRESHOLD = 500; // –ü–æ—Ä–æ–≥ –¥–ª—è –¥–æ–ª–≥–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è (–º—Å)
    let currentContextMenuTargetId = null; // ID —ç–ª–µ–º–µ–Ω—Ç–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
    let currentContextMenuType = null; // 'section' –∏–ª–∏ 'item'
    let currentTaskForStatusChange = null;
    let longPressTaskTimer; // –î–ª—è –¥–æ–ª–≥–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∑–∞–¥–∞—á–∏
    const LONG_PRESS_TASK_THRESHOLD = 500; // –ü–æ—Ä–æ–≥ –¥–ª—è –¥–æ–ª–≥–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∑–∞–¥–∞—á—É

    // –ò–º–∏—Ç–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞
    let allSections = [
        { id: 'sec1', name: '–°–∫–ª–∞–¥', icon: 'üì¶', parentId: null, recipients: [], hiddenFor: [] },
        { id: 'sec2', name: '–û—Ñ–∏—Å', icon: 'üè¢', parentId: null, recipients: [], hiddenFor: [] },
        { id: 'sec3', name: '–ê–≤—Ç–æ–ø–∞—Ä–∫', icon: 'üöó', parentId: null, recipients: [], hiddenFor: [] },
        { id: 'sub1_1', name: '–ü—Ä–æ–¥—É–∫—Ç—ã –ê', parentId: 'sec1', recipients: [], hiddenFor: [] },
        { id: 'sub1_2', name: '–ü—Ä–æ–¥—É–∫—Ç—ã –ë', parentId: 'sec1', recipients: [], hiddenFor: [] },
        { id: 'sub2_1', name: '–ö–∞–Ω—Ü—Ç–æ–≤–∞—Ä—ã', parentId: 'sec2', recipients: [], hiddenFor: [] },
    ];

    let allItems = [
        { id: 'item1', name: '–ú–æ–ª–æ–∫–æ', parentId: 'sub1_1', quantity: 10, minQuantity: 5, recipients: [], hiddenFor: [] },
        { id: 'item2', name: '–•–ª–µ–±', parentId: 'sub1_1', quantity: 20, minQuantity: 10, recipients: [], hiddenFor: [] },
        { id: 'item3', name: '–†—É—á–∫–∏', parentId: 'sub2_1', quantity: 50, minQuantity: 20, recipients: [], hiddenFor: [] },
        { id: 'item4', name: '–ë—É–º–∞–≥–∞ –ê4', parentId: 'sub2_1', quantity: 5, minQuantity: 10, recipients: [], hiddenFor: [] }, // –ù–∏–∑–∫–∏–π –∑–∞–ø–∞—Å
        { id: 'item5', name: '–ú–∞—Å–ª–æ –º–æ—Ç–æ—Ä–Ω–æ–µ', parentId: 'sec3', quantity: 2, minQuantity: 5, recipients: [], hiddenFor: [] }, // –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π
        { id: 'item6', name: '–®–∏–Ω—ã –∑–∏–º–Ω–∏–µ', parentId: 'sec3', quantity: 8, minQuantity: 4, recipients: [], hiddenFor: [] },
    ];

    let allTasks = [
        { id: 'task1', title: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–ø–∞—Å—ã –Ω–∞ —Å–∫–ª–∞–¥–µ –ê', assignedTo: '123456789', status: '–í —Ä–∞–±–æ—Ç–µ', description: '–°–∫–ª–∞–¥ –ê —Ç—Ä–µ–±—É–µ—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–∏ –≤—Å–µ—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤.' },
        { id: 'task2', title: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–∂–µ–º–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç', assignedTo: '998877665', status: '–ó–∞–≤–µ—Ä—à–µ–Ω–∞', description: '–û—Ç—á–µ—Ç –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º –∑–∞ –∏—é–Ω—å.' },
        { id: 'task3', title: '–ó–∞–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–µ —Ä–∞—Å—Ö–æ–¥–Ω–∏–∫–∏', assignedTo: '123456789', status: '–ù–æ–≤–∞—è', description: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–∫–∞–∑–∞—Ç—å –∫–∞–Ω—Ü–µ–ª—è—Ä—Å–∫–∏–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–Ω–æ—Å—Ç–∏.' },
        { id: 'task4', title: '–û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É —Å –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–º', assignedTo: '112233445', status: '–û—Ç–ª–æ–∂–µ–Ω–∞', description: '–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤—Å—Ç—Ä–µ—á—É –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é.' },
        { id: 'task5', title: '–ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é', assignedTo: '123456789', status: '–í —Ä–∞–±–æ—Ç–µ', description: '–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞.' },
        { id: 'task6', title: '–°–æ–≥–ª–∞—Å–æ–≤–∞—Ç—å –¥–æ–≥–æ–≤–æ—Ä', assignedTo: '998877665', status: '–ù–æ–≤–∞—è', description: '–î–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –¥–æ–≥–æ–≤–æ—Ä—É ‚Ññ123.' },
        { id: 'task7', title: '–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –≤—Å–µ—Ö', assignedTo: null, status: '–ù–æ–≤–∞—è', description: '–≠—Ç—É –∑–∞–¥–∞—á—É –º–æ–∂–µ—Ç –≤–∑—è—Ç—å –ª—é–±–æ–π —Å–≤–æ–±–æ–¥–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫.' },
        { id: 'task8', title: '–ï—â–µ –æ–¥–Ω–∞ —Å–≤–æ–±–æ–¥–Ω–∞—è –∑–∞–¥–∞—á–∞', assignedTo: 'unassigned', status: '–ù–æ–≤–∞—è', description: '' }
    ];

    let allUsers = [
        { id: '123456789', name: '–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤', role: 'employee' },
        { id: '998877665', name: '–ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤', role: 'employee' },
        { id: '112233445', name: '–°–∏–¥–æ—Ä –°–∏–¥–æ—Ä–æ–≤', role: 'employee' },
        { id: '987654321', name: '–ê–Ω–Ω–∞ –ê–¥–º–∏–Ω–æ–≤–∞', role: 'main_admin' },
        { id: '543210987', name: '–û–ª—å–≥–∞ –ú–ª–∞–¥—à–∞—è', role: 'junior_admin' },
    ];

    let companyData = {
        name: '–ù–∞–∑–≤–∞–Ω–∏–µ –ö–æ–º–ø–∞–Ω–∏–∏',
        logoUrl: 'https://via.placeholder.com/40',
        botLogoUrl: 'https://via.placeholder.com/40',
        adminNotes: ['–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!', '–ü—Ä–æ–≤–µ–¥–∏—Ç–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—é –¥–æ –∫–æ–Ω—Ü–∞ –Ω–µ–¥–µ–ª–∏.'],
        darkMode: false // –ü—Ä–∏–º–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è
    };

    // --- Utility Functions ---
    function generateUniqueId() {
        return '_' + Math.random().toString(36).substr(2, 9);
    }

    function showPage(pageId) {
        document.querySelectorAll('.page-content').forEach(page => {
            page.classList.add('hidden');
        });
        document.getElementById(pageId).classList.remove('hidden');

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –≤ –Ω–∏–∂–Ω–µ–º –º–µ–Ω—é
        bottomNavItems.forEach(item => {
            if (item.dataset.page === pageId) {
                item.classList.add('active');
            } else {
                item.classList.remove('active');
            }
        });
        hideContextMenu();
        hideAllModals(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –º–æ–¥–∞–ª—å–Ω—ã–µ –æ–∫–Ω–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    }

    function updateCompanyInfo() {
        companyNameElem.textContent = companyData.name;
        companyLogo.src = companyData.logoUrl;
        document.body.classList.toggle('dark-mode', companyData.darkMode);
    }

    function updateAdminNotes(notes) {
        adminNotesContent.innerHTML = '';
        if (notes && notes.length > 0) {
            notes.forEach(note => {
                const p = document.createElement('p');
                p.textContent = note;
                adminNotesContent.appendChild(p);
            });
            companyData.adminNotes = notes; // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        } else {
            adminNotesContent.innerHTML = '<p>–ù–µ—Ç —Ç–µ–∫—É—â–∏—Ö –∑–∞–º–µ—Ç–æ–∫ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.</p>';
            companyData.adminNotes = [];
        }
    }

    function renderSections(parentId) {
        mainSectionsGrid.innerHTML = '';
        subSectionsList.innerHTML = '';
        itemsList.innerHTML = '';
        goBackSectionBtn.style.display = (parentId === null) ? 'none' : 'block';
        currentSectionNameElem.textContent = (parentId === null) ? '–ì–ª–∞–≤–Ω–∞—è' : allSections.find(s => s.id === parentId)?.name || '–†–∞–∑–¥–µ–ª';
        currentSectionId = parentId;

        const filteredSections = allSections.filter(section => section.parentId === parentId);
        const filteredItems = allItems.filter(item => item.parentId === parentId);

        // Render main sections if parentId is null
        if (parentId === null) {
            sectionsPage.classList.add('hidden');
            homePage.classList.remove('hidden');
            mainSectionsGrid.style.display = 'grid';
            sectionsAdminActions.style.display = 'flex'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∞–º–∏ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π

            filteredSections.forEach(section => {
                const sectionDiv = document.createElement('div');
                sectionDiv.classList.add('section-item');
                sectionDiv.innerHTML = `
                    <span class="section-item-icon">${section.icon || 'üìÅ'}</span>
                    <h3>${section.name}</h3>
                `;
                // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–ª–≥–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è –∏ –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
                if (isAdmin) {
                    sectionDiv.addEventListener('mousedown', (e) => startLongPress(e, section.id, 'section'));
                    sectionDiv.addEventListener('mouseup', cancelLongPress);
                    sectionDiv.addEventListener('mouseleave', cancelLongPress);
                    sectionDiv.addEventListener('touchstart', (e) => startLongPress(e, section.id, 'section'), { passive: true });
                    sectionDiv.addEventListener('touchend', cancelLongPress);
                    sectionDiv.addEventListener('touchcancel', cancelLongPress);

                    const sectionActionsDiv = document.createElement('div');
                    sectionActionsDiv.classList.add('section-item-actions');

                    const editButton = document.createElement('button');
                    editButton.classList.add('section-action-button');
                    editButton.innerHTML = '&#9998;'; // –ö–∞—Ä–∞–Ω–¥–∞—à
                    editButton.title = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–¥–µ–ª';
                    editButton.addEventListener('click', (e) => {
                        e.stopPropagation();
                        editSection(section.id, section.name);
                    });
                    sectionActionsDiv.appendChild(editButton);

                    const deleteButton = document.createElement('button');
                    deleteButton.classList.add('section-action-button');
                    deleteButton.innerHTML = '&#10006;'; // –ö—Ä–µ—Å—Ç–∏–∫
                    deleteButton.title = '–£–¥–∞–ª–∏—Ç—å —Ä–∞–∑–¥–µ–ª';
                    deleteButton.addEventListener('click', (e) => {
                        e.stopPropagation();
                        deleteSection(section.id);
                    });
                    sectionActionsDiv.appendChild(deleteButton);

                    sectionDiv.appendChild(sectionActionsDiv);
                }

                // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º
                sectionDiv.addEventListener('click', (e) => {
                    // –†–∞–∑—Ä–µ—à–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é, –µ—Å–ª–∏ –Ω–µ –±—ã–ª–æ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–µ–π—Å—Ç–≤–∏—è –∏–ª–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é
                    if (isAdmin && (e.target.closest('.section-action-button') || e.target.closest('.context-menu-item'))) {
                        return;
                    }
                    if (longPressTimer && isAdmin) { // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –∞–¥–º–∏–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º longPressTimer
                        return;
                    }
                    if (window.Telegram && window.Telegram.WebApp) {
                        Telegram.WebApp.HapticFeedback.impactOccurred('light');
                    }
                    navigateToSection(section.id, section.name);
                });
                mainSectionsGrid.appendChild(sectionDiv);
            });
        } else {
            // Render sub-sections and items
            homePage.classList.add('hidden');
            sectionsPage.classList.remove('hidden');
            mainSectionsGrid.style.display = 'none';
            sectionsAdminActions.style.display = 'none'; // –°–∫—Ä—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–¥–µ–ª–∞–º–∏ –Ω–∞ –ø–æ–¥—Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö

            // Show 'Create Sub-section' and 'Create Item' buttons based on current depth
            createSubSectionBtn.style.display = 'block';
            createItemBtn.style.display = 'block';

            if (filteredSections.length > 0) {
                filteredSections.forEach(section => {
                    const sectionDiv = document.createElement('div');
                    sectionDiv.classList.add('sub-section-item');
                    sectionDiv.innerHTML = `<h3>${section.name}</h3>`;
                     // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–ª–≥–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è –∏ –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
                     if (isAdmin) {
                        sectionDiv.addEventListener('mousedown', (e) => startLongPress(e, section.id, 'section'));
                        sectionDiv.addEventListener('mouseup', cancelLongPress);
                        sectionDiv.addEventListener('mouseleave', cancelLongPress);
                        sectionDiv.addEventListener('touchstart', (e) => startLongPress(e, section.id, 'section'), { passive: true });
                        sectionDiv.addEventListener('touchend', cancelLongPress);
                        sectionDiv.addEventListener('touchcancel', cancelLongPress);

                        const sectionActionsDiv = document.createElement('div');
                        sectionActionsDiv.classList.add('section-item-actions');

                        const editButton = document.createElement('button');
                        editButton.classList.add('section-action-button');
                        editButton.innerHTML = '&#9998;'; // –ö–∞—Ä–∞–Ω–¥–∞—à
                        editButton.title = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª';
                        editButton.addEventListener('click', (e) => {
                            e.stopPropagation();
                            editSection(section.id, section.name);
                        });
                        sectionActionsDiv.appendChild(editButton);

                        const deleteButton = document.createElement('button');
                        deleteButton.classList.add('section-action-button');
                        deleteButton.innerHTML = '&#10006;'; // –ö—Ä–µ—Å—Ç–∏–∫
                        deleteButton.title = '–£–¥–∞–ª–∏—Ç—å –ø–æ–¥—Ä–∞–∑–¥–µ–ª';
                        deleteButton.addEventListener('click', (e) => {
                            e.stopPropagation();
                            deleteSection(section.id);
                        });
                        sectionActionsDiv.appendChild(deleteButton);

                        sectionDiv.appendChild(sectionActionsDiv);
                    }

                    sectionDiv.addEventListener('click', (e) => {
                        if (isAdmin && (e.target.closest('.section-action-button') || e.target.closest('.context-menu-item'))) {
                            return;
                        }
                        if (longPressTimer && isAdmin) { // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –∞–¥–º–∏–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º longPressTimer
                            return;
                        }
                        if (window.Telegram && window.Telegram.WebApp) {
                            Telegram.WebApp.HapticFeedback.impactOccurred('light');
                        }
                        navigateToSection(section.id, section.name);
                    });
                    subSectionsList.appendChild(sectionDiv);
                });
            }

            if (filteredItems.length > 0) {
                filteredItems.forEach(item => {
                    const itemDiv = document.createElement('div');
                    itemDiv.classList.add('item-card');
                    let statusClass = '';
                    if (item.quantity <= item.minQuantity) {
                        statusClass = 'critical';
                    } else if (item.quantity <= item.minQuantity * 1.5 && item.minQuantity > 0) { // –ü—Ä–∏–º–µ—Ä: –Ω–∏–∑–∫–∏–π –∑–∞–ø–∞—Å, –µ—Å–ª–∏ –º–µ–Ω—å—à–µ 1.5 –º–∏–Ω. –∫–æ–ª-–≤–∞
                        statusClass = 'low-stock';
                    }
                    itemDiv.classList.add(statusClass);

                    itemDiv.innerHTML = `
                        <h3>${item.name}</h3>
                        <p class="item-quantity">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${item.quantity}</p>
                        <p class="item-min-quantity">–ú–∏–Ω. –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${item.minQuantity || '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}</p>
                    `;
                    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–ª–≥–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è –∏ –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤
                    if (isAdmin) {
                        itemDiv.addEventListener('mousedown', (e) => startLongPress(e, item.id, 'item'));
                        itemDiv.addEventListener('mouseup', cancelLongPress);
                        itemDiv.addEventListener('mouseleave', cancelLongPress);
                        itemDiv.addEventListener('touchstart', (e) => startLongPress(e, item.id, 'item'), { passive: true });
                        itemDiv.addEventListener('touchend', cancelLongPress);
                        itemDiv.addEventListener('touchcancel', cancelLongPress);

                        const itemActionsDiv = document.createElement('div');
                        itemActionsDiv.classList.add('section-item-actions');

                        const editButton = document.createElement('button');
                        editButton.classList.add('section-action-button');
                        editButton.innerHTML = '&#9998;';
                        editButton.title = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é';
                        editButton.addEventListener('click', (e) => {
                            e.stopPropagation();
                            editItem(item.id, item.name, item.quantity, item.minQuantity);
                        });
                        itemActionsDiv.appendChild(editButton);

                        const deleteButton = document.createElement('button');
                        deleteButton.classList.add('section-action-button');
                        deleteButton.innerHTML = '&#10006;';
                        deleteButton.title = '–£–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é';
                        deleteButton.addEventListener('click', (e) => {
                            e.stopPropagation();
                            deleteItem(item.id);
                        });
                        itemActionsDiv.appendChild(deleteButton);

                        itemDiv.appendChild(itemActionsDiv);
                    }

                    itemDiv.addEventListener('click', (e) => {
                        if (isAdmin && (e.target.closest('.section-action-button') || e.target.closest('.context-menu-item'))) {
                            return;
                        }
                        if (longPressTimer && isAdmin) { // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ –∞–¥–º–∏–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º longPressTimer
                            return;
                        }
                        if (window.Telegram && window.Telegram.WebApp) {
                            Telegram.WebApp.HapticFeedback.impactOccurred('light');
                            Telegram.WebApp.showAlert(`–ü–æ–∑–∏—Ü–∏—è: ${item.name}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${item.quantity}\n–ú–∏–Ω. –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${item.minQuantity || '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}`);
                        } else {
                            alert(`–ü–æ–∑–∏—Ü–∏—è: ${item.name}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${item.quantity}\n–ú–∏–Ω. –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${item.minQuantity || '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}`);
                        }
                    });
                    itemsList.appendChild(itemDiv);
                });
            }

            if (filteredSections.length === 0 && filteredItems.length === 0) {
                subSectionsList.innerHTML = '<p class="no-tasks-message">–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥—Ä–∞–∑–¥–µ–ª–æ–≤ –∏–ª–∏ –ø–æ–∑–∏—Ü–∏–π.</p>';
            }
        }
    }

    function navigateToSection(id, name) {
        currentSectionId = id;
        currentSectionNameElem.textContent = name;
        renderSections(id);
        if (id === null) {
            showPage('home-page');
        } else {
            showPage('sections-page');
        }
    }

    function renderTasks(filter) {
        tasksList.innerHTML = '';
        const filteredTasks = allTasks.filter(task => {
            if (filter === 'all') return true;
            if (filter === 'my') return task.assignedTo === currentUserId;
            return false;
        });

        if (filteredTasks.length === 0) {
            tasksList.innerHTML = '<p class="no-tasks-message">–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞—á.</p>';
            return;
        }

        filteredTasks.forEach(task => {
            const taskItem = document.createElement('div');
            taskItem.classList.add('task-item');

            let statusText = task.status;
            let statusClass = '';
            switch (task.status) {
                case '–ù–æ–≤–∞—è':
                    statusClass = 'new';
                    break;
                case '–í —Ä–∞–±–æ—Ç–µ':
                    statusClass = 'in-progress';
                    break;
                case '–ó–∞–≤–µ—Ä—à–µ–Ω–∞':
                    statusClass = 'completed';
                    break;
                case '–û—Ç–ª–æ–∂–µ–Ω–∞':
                    statusClass = 'deferred';
                    break;
                default:
                    statusClass = 'new';
            }
            const assignedUserName = allUsers.find(u => u.id === task.assignedTo)?.name || '–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–æ';

            taskItem.innerHTML = `
                <div class="task-title">${task.title}</div>
                <div class="task-description" style="font-size: 0.9em; color: var(--bottom-nav-text-color); margin-top: 4px;">${task.description || ''}</div>
                <div class="task-info">
                    <span class="task-status ${statusClass}">${statusText}</span>
                    <span class="task-assigned-to">–ù–∞–∑–Ω–∞—á–µ–Ω–æ: ${assignedUserName}</span>
                </div>
            `;

            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–ª–≥–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
            taskItem.addEventListener('mousedown', (e) => startLongPressTask(e, task.id));
            taskItem.addEventListener('mouseup', cancelLongPressTask);
            taskItem.addEventListener('mouseleave', cancelLongPressTask);
            taskItem.addEventListener('touchstart', (e) => startLongPressTask(e, task.id), { passive: true });
            taskItem.addEventListener('touchend', cancelLongPressTask);
            taskItem.addEventListener('touchcancel', cancelLongPressTask);

            taskItem.addEventListener('click', () => {
                // –ï—Å–ª–∏ —Å—Ä–∞–±–æ—Ç–∞–ª–æ –¥–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ, —Ç–æ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∫–ª–∏–∫
                if (longPressTaskTimer === null) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–π–º–µ—Ä –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω (—Ç.–µ. –Ω–µ –±—ã–ª–æ –¥–æ–ª–≥–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è)
                    if (window.Telegram && window.Telegram.WebApp) {
                        Telegram.WebApp.HapticFeedback.impactOccurred('light');
                        Telegram.WebApp.showAlert(`–ó–∞–¥–∞—á–∞: "${task.title}"\n–û–ø–∏—Å–∞–Ω–∏–µ: ${task.description || '–ù–µ—Ç'}\n–°—Ç–∞—Ç—É—Å: ${task.status}\n–ù–∞–∑–Ω–∞—á–µ–Ω–∞: ${assignedUserName}`);
                    } else {
                        alert(`–ó–∞–¥–∞—á–∞: "${task.title}"\n–û–ø–∏—Å–∞–Ω–∏–µ: ${task.description || '–ù–µ—Ç'}\n–°—Ç–∞—Ç—É—Å: ${task.status}\n–ù–∞–∑–Ω–∞—á–µ–Ω–∞: ${assignedUserName}`);
                    }
                }
            });

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –∏ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É"
            if ((!task.assignedTo || task.assignedTo === 'unassigned') && task.status !== '–ó–∞–≤–µ—Ä—à–µ–Ω–∞') {
                const takeTaskButton = document.createElement('button');
                takeTaskButton.classList.add('take-task-button');
                takeTaskButton.textContent = '–í–∑—è—Ç—å –≤ —Ä–∞–±–æ—Ç—É';
                takeTaskButton.addEventListener('click', async (e) => {
                    e.stopPropagation(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–ª–∏–∫–∞ –ø–æ –∑–∞–¥–∞—á–µ
                    if (window.Telegram && window.Telegram.WebApp) {
                        Telegram.WebApp.HapticFeedback.impactOccurred('medium');
                        const confirmed = await new Promise(resolve => {
                            Telegram.WebApp.showConfirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–∑—è—Ç—å –∑–∞–¥–∞—á—É "${task.title}" –≤ —Ä–∞–±–æ—Ç—É?`, (result) => resolve(result));
                        });
                        if (confirmed) {
                            task.assignedTo = currentUserId;
                            task.status = '–í —Ä–∞–±–æ—Ç–µ'; // –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –º–µ–Ω—è–µ—Ç—Å—è –Ω–∞ "–í —Ä–∞–±–æ—Ç–µ"
                            renderTasks(document.querySelector('#tasks-page .filter-tab.active')?.dataset.filter || 'all');
                            Telegram.WebApp.sendData(JSON.stringify({
                                type: 'take_task',
                                payload: {
                                    taskId: task.id,
                                    assignedTo: currentUserId,
                                    status: '–í —Ä–∞–±–æ—Ç–µ'
                                }
                            }));
                            Telegram.WebApp.showAlert(`–í—ã –≤–∑—è–ª–∏ –∑–∞–¥–∞—á—É "${task.title}" –≤ —Ä–∞–±–æ—Ç—É.`);
                        } else {
                            Telegram.WebApp.HapticFeedback.notificationOccurred('light');
                        }
                    } else {
                        if (confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤–∑—è—Ç—å –∑–∞–¥–∞—á—É "${task.title}" –≤ —Ä–∞–±–æ—Ç—É?`)) {
                            task.assignedTo = currentUserId;
                            task.status = '–í —Ä–∞–±–æ—Ç–µ';
                            renderTasks(document.querySelector('#tasks-page .filter-tab.active')?.dataset.filter || 'all');
                            alert(`–í—ã –≤–∑—è–ª–∏ –∑–∞–¥–∞—á—É "${task.title}" –≤ —Ä–∞–±–æ—Ç—É (—Ç–æ–ª—å–∫–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ).`);
                        }
                    }
                });
                taskItem.appendChild(takeTaskButton);
            }

            tasksList.appendChild(taskItem);
        });
    }

    // --- Modal Functions ---
    function showModal(modal) {
        if (window.Telegram && window.Telegram.WebApp) {
            Telegram.WebApp.HapticFeedback.impactOccurred('heavy');
        }
        document.body.classList.add('modal-open');
        modal.classList.remove('hidden');
        modal.style.display = 'flex'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∫ flex-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –∫–ª–∏–∫–∞, —á—Ç–æ–±—ã –∫–ª–∏–∫ –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –Ω–µ –∑–∞–∫—Ä—ã–≤–∞–ª –µ–≥–æ
        modal.querySelector('.modal-content').addEventListener('click', (e) => e.stopPropagation());
    }

    function hideModal(modal) {
        document.body.classList.remove('modal-open');
        modal.classList.add('hidden');
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ —Å–∫—Ä—ã—Ç–∏–µ–º display, —á—Ç–æ–±—ã –∞–Ω–∏–º–∞—Ü–∏—è —É—Å–ø–µ–ª–∞ –æ—Ç—Ä–∞–±–æ—Ç–∞—Ç—å
        setTimeout(() => {
            modal.style.display = 'none';
        }, 300);
    }

    function hideAllModals() {
        hideModal(newSectionModal);
        hideModal(editModal);
        hideModal(quantityModal);
        hideModal(recipientsModal);
        hideModal(taskStatusModal);
        hideModal(createTaskModal);
    }

    function startLongPress(e, id, type) {
        if (!isAdmin) return; // –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–æ–ª–≥–æ–µ –Ω–∞–∂–∞—Ç–∏–µ
        if (e.touches && e.touches.length > 1) { // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –º—É–ª—å—Ç–∏—Ç–∞—á
            cancelLongPress();
            return;
        }
        clearTimeout(longPressTimer);
        longPressTimer = setTimeout(() => {
            currentContextMenuTargetId = id;
            currentContextMenuType = type;
            showContextMenu(e);
        }, LONG_PRESS_THRESHOLD);
    }

    function cancelLongPress() {
        clearTimeout(longPressTimer);
        longPressTimer = null;
    }

    function showContextMenu(e) {
        if (!isAdmin) return;
        if (window.Telegram && window.Telegram.WebApp) {
            Telegram.WebApp.HapticFeedback.impactOccurred('heavy');
        }
        contextMenu.classList.remove('hidden');
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é
        let x = e.clientX || e.touches[0].clientX;
        let y = e.clientY || e.touches[0].clientY;

        // –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏—é, —á—Ç–æ–±—ã –º–µ–Ω—é –Ω–µ –≤—ã—Ö–æ–¥–∏–ª–æ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—ã —ç–∫—Ä–∞–Ω–∞
        const menuWidth = contextMenu.offsetWidth;
        const menuHeight = contextMenu.offsetHeight;
        if (x + menuWidth > window.innerWidth) {
            x = window.innerWidth - menuWidth - 10; // 10px –æ—Ç—Å—Ç—É–ø
        }
        if (y + menuHeight > window.innerHeight) {
            y = window.innerHeight - menuHeight - 10; // 10px –æ—Ç—Å—Ç—É–ø
        }
        contextMenu.style.left = `${x}px`;
        contextMenu.style.top = `${y}px`;

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –ø—É–Ω–∫—Ç–æ–≤ –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —ç–ª–µ–º–µ–Ω—Ç–∞
        contextMenuItems.forEach(item => {
            const action = item.dataset.action;
            item.style.display = 'block'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

            if (currentContextMenuType === 'section') {
                if (action === 'add-subtract' || action === 'min-quantity' || action === 'remind') {
                    item.style.display = 'none'; // –≠—Ç–∏ –¥–µ–π—Å—Ç–≤–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–∑–∏—Ü–∏–π
                }
            } else if (currentContextMenuType === 'item') {
                // –í—Å–µ –ø—É–Ω–∫—Ç—ã –º–æ–≥—É—Ç –±—ã—Ç—å –¥–ª—è –ø–æ–∑–∏—Ü–∏–π, –Ω–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                // –ü–æ–∫–∞ –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
            }
        });

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –µ–≥–æ
        document.addEventListener('click', hideContextMenuOnClickOutside, { once: true });
    }

    function hideContextMenu() {
        contextMenu.classList.add('hidden');
        currentContextMenuTargetId = null;
        currentContextMenuType = null;
        document.removeEventListener('click', hideContextMenuOnClickOutside);
    }

    function hideContextMenuOnClickOutside(event) {
        if (!contextMenu.contains(event.target)) {
            hideContextMenu();
        }
    }
  
        // --- Section/Item Management Functions ---
    function createSection(name, parentId, icon = 'üìÅ') {
        const newSection = {
            id: generateUniqueId(),
            name: name,
            icon: icon, // –î–ª—è –∫–æ—Ä–Ω–µ–≤—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤ –º–æ–∂–µ—Ç –±—ã—Ç—å –∏–∫–æ–Ω–∫–∞
            parentId: parentId,
            recipients: [],
            hiddenFor: []
        };
        allSections.push(newSection);
        renderSections(parentId);

        if (window.Telegram && window.Telegram.WebApp) {
            Telegram.WebApp.sendData(JSON.stringify({
                type: 'create_section',
                payload: newSection
            }));
            Telegram.WebApp.showAlert(`–†–∞–∑–¥–µ–ª "${name}" —Å–æ–∑–¥–∞–Ω.`);
        } else {
            alert(`–†–∞–∑–¥–µ–ª "${name}" —Å–æ–∑–¥–∞–Ω (—Ç–æ–ª—å–∫–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ).`);
        }
    }

    function createItem(name, parentId, quantity, minQuantity) {
        const newItem = {
            id: generateUniqueId(),
            name: name,
            parentId: parentId,
            quantity: quantity,
            minQuantity: minQuantity,
            recipients: [],
            hiddenFor: []
        };
        allItems.push(newItem);
        renderSections(parentId);

        if (window.Telegram && window.Telegram.WebApp) {
            Telegram.WebApp.sendData(JSON.stringify({
                type: 'create_item',
                payload: newItem
            }));
            Telegram.WebApp.showAlert(`–ü–æ–∑–∏—Ü–∏—è "${name}" –¥–æ–±–∞–≤–ª–µ–Ω–∞.`);
        } else {
            alert(`–ü–æ–∑–∏—Ü–∏—è "${name}" –¥–æ–±–∞–≤–ª–µ–Ω–∞ (—Ç–æ–ª—å–∫–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ).`);
        }
    }

    function editSection(id, currentName) {
        currentEditedElement = allSections.find(s => s.id === id);
        if (!currentEditedElement) return;

        showModal(editModal);
        editModalTitle.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–¥–µ–ª';
        editNameInput.value = currentName;
        editItemFields.style.display = 'none'; // –°–∫—Ä—ã–≤–∞–µ–º –ø–æ–ª—è –¥–ª—è –ø–æ–∑–∏—Ü–∏–π

        confirmEditBtn.onclick = async () => {
            const newName = editNameInput.value.trim();
            if (newName && currentEditedElement) {
                let confirmed;
                if (window.Telegram && window.Telegram.WebApp) {
                    confirmed = await new Promise(resolve => {
                        Telegram.WebApp.showConfirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Ä–∞–∑–¥–µ–ª –≤ "${newName}"?`, (result) => resolve(result));
                    });
                } else {
                    confirmed = confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å —Ä–∞–∑–¥–µ–ª –≤ "${newName}"?`);
                }

                if (confirmed) {
                    currentEditedElement.name = newName;
                    renderSections(currentEditedElement.parentId);
                    hideModal(editModal);

                    if (window.Telegram && window.Telegram.WebApp) {
                        Telegram.WebApp.sendData(JSON.stringify({
                            type: 'edit_section',
                            payload: { id: currentEditedElement.id, name: newName }
                        }));
                        Telegram.WebApp.showAlert(`–†–∞–∑–¥–µ–ª "${newName}" –æ–±–Ω–æ–≤–ª–µ–Ω.`);
                    } else {
                        alert(`–†–∞–∑–¥–µ–ª "${newName}" –æ–±–Ω–æ–≤–ª–µ–Ω (—Ç–æ–ª—å–∫–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ).`);
                    }
                }
            } else {
                if (window.Telegram && window.Telegram.WebApp) {
                    Telegram.WebApp.showAlert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.');
                } else {
                    alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.');
                }
            }
        };
    }

    function editItem(id, currentName, currentQuantity, currentMinQuantity) {
        currentEditedElement = allItems.find(item => item.id === id);
        if (!currentEditedElement) return;

        showModal(editModal);
        editModalTitle.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–∑–∏—Ü–∏—é';
        editNameInput.value = currentName;
        editQuantityInput.value = currentQuantity;
        editMinQuantityInput.value = currentMinQuantity;
        editItemFields.style.display = 'block'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–ª—è –¥–ª—è –ø–æ–∑–∏—Ü–∏–π

        confirmEditBtn.onclick = async () => {
            const newName = editNameInput.value.trim();
            const newQuantity = parseInt(editQuantityInput.value);
            const newMinQuantity = parseInt(editMinQuantityInput.value);

            if (newName && !isNaN(newQuantity) && newQuantity >= 0 && !isNaN(newMinQuantity) && newMinQuantity >= 0 && currentEditedElement) {
                let confirmed;
                if (window.Telegram && window.Telegram.WebApp) {
                    confirmed = await new Promise(resolve => {
                        Telegram.WebApp.showConfirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é "${newName}"?\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${newQuantity}\n–ú–∏–Ω. –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${newMinQuantity}`, (result) => resolve(result));
                    });
                } else {
                    confirmed = confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é "${newName}"?\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${newQuantity}\n–ú–∏–Ω. –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${newMinQuantity}`);
                }

                if (confirmed) {
                    currentEditedElement.name = newName;
                    currentEditedElement.quantity = newQuantity;
                    currentEditedElement.minQuantity = newMinQuantity;
                    renderSections(currentEditedElement.parentId);
                    hideModal(editModal);

                    if (window.Telegram && window.Telegram.WebApp) {
                        Telegram.WebApp.sendData(JSON.stringify({
                            type: 'edit_item',
                            payload: {
                                id: currentEditedElement.id,
                                name: newName,
                                quantity: newQuantity,
                                minQuantity: newMinQuantity
                            }
                        }));
                        Telegram.WebApp.showAlert(`–ü–æ–∑–∏—Ü–∏—è "${newName}" –æ–±–Ω–æ–≤–ª–µ–Ω–∞.`);
                    } else {
                        alert(`–ü–æ–∑–∏—Ü–∏—è "${newName}" –æ–±–Ω–æ–≤–ª–µ–Ω–∞ (—Ç–æ–ª—å–∫–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ).`);
                    }
                }
            } else {
                if (window.Telegram && window.Telegram.WebApp) {
                    Telegram.WebApp.showAlert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞).');
                } else {
                    alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞).');
                }
            }
        };
    }

    async function deleteSection(id) {
        const sectionToDelete = allSections.find(s => s.id === id);
        if (!sectionToDelete) return;

        let confirmed;
        if (window.Telegram && window.Telegram.WebApp) {
            confirmed = await new Promise(resolve => {
                Telegram.WebApp.showConfirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ä–∞–∑–¥–µ–ª "${sectionToDelete.name}"? –í—Å–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª—ã –∏ –ø–æ–∑–∏—Ü–∏–∏ –≤–Ω—É—Ç—Ä–∏ –±—É–¥—É—Ç —Ç–∞–∫–∂–µ —É–¥–∞–ª–µ–Ω—ã.`, (result) => resolve(result));
            });
        } else {
            confirmed = confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ä–∞–∑–¥–µ–ª "${sectionToDelete.name}"? –í—Å–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª—ã –∏ –ø–æ–∑–∏—Ü–∏–∏ –≤–Ω—É—Ç—Ä–∏ –±—É–¥—É—Ç —Ç–∞–∫–∂–µ —É–¥–∞–ª–µ–Ω—ã.`);
        }

        if (confirmed) {
            // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            const idsToDelete = [id];
            let index = 0;
            while (index < idsToDelete.length) {
                const currentId = idsToDelete[index];
                allSections.filter(s => s.parentId === currentId).forEach(s => idsToDelete.push(s.id));
                index++;
            }

            allSections = allSections.filter(s => !idsToDelete.includes(s.id));
            allItems = allItems.filter(item => !idsToDelete.includes(item.parentId) && item.parentId !== id); // –£–¥–∞–ª—è–µ–º –∏—Ç–µ–º—ã –∏–∑ —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤

            renderSections(sectionToDelete.parentId); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —Ä–∞–∑–¥–µ–ª
            hideContextMenu();

            if (window.Telegram && window.Telegram.WebApp) {
                Telegram.WebApp.sendData(JSON.stringify({
                    type: 'delete_section',
                    payload: { id: id }
                }));
                Telegram.WebApp.showAlert(`–†–∞–∑–¥–µ–ª "${sectionToDelete.name}" —É–¥–∞–ª–µ–Ω.`);
            } else {
                alert(`–†–∞–∑–¥–µ–ª "${sectionToDelete.name}" —É–¥–∞–ª–µ–Ω (—Ç–æ–ª—å–∫–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ).`);
            }
        } else {
            hideContextMenu();
        }
    }

    async function deleteItem(id) {
        const itemToDelete = allItems.find(item => item.id === id);
        if (!itemToDelete) return;

        let confirmed;
        if (window.Telegram && window.Telegram.WebApp) {
            confirmed = await new Promise(resolve => {
                Telegram.WebApp.showConfirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é "${itemToDelete.name}"?`, (result) => resolve(result));
            });
        } else {
            confirmed = confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é "${itemToDelete.name}"?`);
        }

        if (confirmed) {
            allItems = allItems.filter(item => item.id !== id);
            renderSections(itemToDelete.parentId); // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ä–∞–∑–¥–µ–ª
            hideContextMenu();

            if (window.Telegram && window.Telegram.WebApp) {
                Telegram.WebApp.sendData(JSON.stringify({
                    type: 'delete_item',
                    payload: { id: id }
                }));
                Telegram.WebApp.showAlert(`–ü–æ–∑–∏—Ü–∏—è "${itemToDelete.name}" —É–¥–∞–ª–µ–Ω–∞.`);
            } else {
                alert(`–ü–æ–∑–∏—Ü–∏—è "${itemToDelete.name}" —É–¥–∞–ª–µ–Ω–∞ (—Ç–æ–ª—å–∫–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ).`);
            }
        } else {
            hideContextMenu();
        }
    }

    function showQuantityModal(item) {
        currentItem = item;
        quantityModalTitle.textContent = `–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${item.name}`;
        quantityInput.value = 1; // –°–±—Ä–æ—Å –∑–Ω–∞—á–µ–Ω–∏—è
        showModal(quantityModal);
    }

    async function updateItemQuantity(itemId, change) {
        const item = allItems.find(i => i.id === itemId);
        if (item) {
            const newQuantity = item.quantity + change;
            if (newQuantity < 0) {
                if (window.Telegram && window.Telegram.WebApp) {
                    Telegram.WebApp.showAlert('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.');
                } else {
                    alert('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.');
                }
                return false;
            }

            let confirmed;
            const actionText = change > 0 ? '–¥–æ–±–∞–≤–∏—Ç—å' : '—Å–ø–∏—Å–∞—Ç—å';
            if (window.Telegram && window.Telegram.WebApp) {
                confirmed = await new Promise(resolve => {
                    Telegram.WebApp.showConfirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ ${actionText} ${Math.abs(change)} –∫ "${item.name}"? –ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${newQuantity}`, (result) => resolve(result));
                });
            } else {
                confirmed = confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ ${actionText} ${Math.abs(change)} –∫ "${item.name}"? –ù–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${newQuantity}`);
            }

            if (confirmed) {
                item.quantity = newQuantity;
                renderSections(item.parentId); // –û–±–Ω–æ–≤–ª—è–µ–º UI
                hideModal(quantityModal);
                hideContextMenu();

                if (window.Telegram && window.Telegram.WebApp) {
                    Telegram.WebApp.sendData(JSON.stringify({
                        type: 'update_item_quantity',
                        payload: {
                            id: item.id,
                            quantity: item.quantity
                        }
                    }));
                    Telegram.WebApp.showAlert(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ "${item.name}" –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–æ ${item.quantity}.`);
                } else {
                    alert(`–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ "${item.name}" –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–æ ${item.quantity} (—Ç–æ–ª—å–∫–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ).`);
                }
                return true;
            } else {
                if (window.Telegram && window.Telegram.WebApp) {
                    Telegram.WebApp.HapticFeedback.notificationOccurred('light');
                }
                return false;
            }
        }
        return false;
    }

    function showRecipientsModal(targetId, targetType, currentRecipients, currentHiddenFor) {
        currentContextMenuTargetId = targetId;
        currentContextMenuType = targetType; // 'section' or 'item'
        showModal(recipientsModal);
        populateRecipientsList(currentRecipients, currentHiddenFor);
    }

    function populateRecipientsList(currentRecipients = [], currentHiddenFor = []) {
        // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã–±—Ä–∞–Ω–∞ –≤–∫–ª–∞–¥–∫–∞ "–í—Å–µ" –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞
        // –∏ "–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏" –¥–ª—è –º–ª–∞–¥—à–µ–≥–æ –∞–¥–º–∏–Ω–∞
        document.querySelector('.recipients-modal .filter-tab.active')?.classList.remove('active');
        if (isMainAdmin) {
             document.querySelector('.recipients-modal .filter-tab[data-filter="all"]').classList.add('active');
             renderUsersForSelection('all');
        } else if (isJuniorAdmin) {
            document.querySelector('.recipients-modal .filter-tab[data-filter="employees"]').classList.add('active');
            renderUsersForSelection('employees');
        } else {
             // –î–ª—è –Ω–µ-–∞–¥–º–∏–Ω–æ–≤, –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –ø–æ–ø–∞–ª–∏ —Å—é–¥–∞
             recipientsList.innerHTML = '<p>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –≤—ã–±–æ—Ä–∞.</p>';
             return;
        }

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        recipientsList.querySelectorAll('input[type="checkbox"]').forEach(checkbox => {
            const userId = checkbox.value;
            checkbox.checked = currentRecipients.includes(userId);
            // –¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è "—Å–∫—Ä—ã—Ç—å –æ—Ç", –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            checkbox.dataset.hidden = currentHiddenFor.includes(userId);
        });
    }

    function renderUsersForSelection(filter) {
        recipientsList.innerHTML = '';
        let usersToDisplay = [];

        if (isMainAdmin) {
            usersToDisplay = allUsers; // –ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω –≤–∏–¥–∏—Ç –≤—Å–µ—Ö
        } else if (isJuniorAdmin) {
            usersToDisplay = allUsers.filter(user => user.role === 'employee'); // –ú–ª–∞–¥—à–∏–π –∞–¥–º–∏–Ω –≤–∏–¥–∏—Ç —Ç–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
        } else {
            // –ï—Å–ª–∏ –Ω–µ –∞–¥–º–∏–Ω, –∏–ª–∏ –∫–∞–∫–∞—è-—Ç–æ –¥—Ä—É–≥–∞—è —Ä–æ–ª—å, –≤–æ–∑–º–æ–∂–Ω–æ, —Å–ø–∏—Å–æ–∫ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø—É—Å—Ç—ã–º
            // –∏–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–∞–º–æ–≥–æ —Å–µ–±—è, –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ª–æ–≥–∏–∫–∏.
            usersToDisplay = [];
        }

        let filteredUsers = [];
        if (filter === 'all') {
            filteredUsers = usersToDisplay;
        } else if (filter === 'admins') {
            filteredUsers = usersToDisplay.filter(user => user.role === 'main_admin' || user.role === 'junior_admin');
        } else if (filter === 'employees') {
            filteredUsers = usersToDisplay.filter(user => user.role === 'employee');
        }

        if (filteredUsers.length === 0) {
            recipientsList.innerHTML = '<p>–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.</p>';
            return;
        }

        filteredUsers.forEach(user => {
            const div = document.createElement('div');
            div.classList.add('recipient-item');
            div.innerHTML = `
                <input type="checkbox" id="user-${user.id}" value="${user.id}">
                <label for="user-${user.id}">${user.name} (${user.role === 'main_admin' ? '–ì–ª–∞–≤–Ω—ã–π –∞–¥–º–∏–Ω' : user.role === 'junior_admin' ? '–ú–ª–∞–¥—à–∏–π –∞–¥–º–∏–Ω' : '–°–æ—Ç—Ä—É–¥–Ω–∏–∫'})</label>
            `;
            recipientsList.appendChild(div);
        });
    }

    async function applyRecipientsChanges(actionType) { // actionType: 'remind', 'min_quantity', 'hide_from'
        const selectedUsers = Array.from(recipientsList.querySelectorAll('input[type="checkbox"]:checked')).map(cb => cb.value);

        let targetElement;
        if (currentContextMenuType === 'section') {
            targetElement = allSections.find(s => s.id === currentContextMenuTargetId);
        } else if (currentContextMenuType === 'item') {
            targetElement = allItems.find(i => i.id === currentContextMenuTargetId);
        }

        if (!targetElement) return;

        let confirmed = true;
        let message = '';
        let payload = {};

        if (actionType === 'hide_from') {
            message = `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–∫—Ä—ã—Ç—å "${targetElement.name}" –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π?`;
            targetElement.hiddenFor = selectedUsers; // –ó–∞–º–µ–Ω—è–µ–º –º–∞—Å—Å–∏–≤ —Å–∫—Ä—ã—Ç—ã—Ö
            payload = { id: targetElement.id, type: currentContextMenuType, hiddenFor: selectedUsers };
        } else if (actionType === 'remind') {
            message = `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è "${targetElement.name}" –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π?`;
            targetElement.recipients = selectedUsers; // –ó–∞–º–µ–Ω—è–µ–º –º–∞—Å—Å–∏–≤ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            payload = { id: targetElement.id, type: currentContextMenuType, recipients: selectedUsers };
        } else if (actionType === 'min_quantity') {
            message = `–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–º –º–∏–Ω–∏–º—É–º–µ –¥–ª—è "${targetElement.name}" –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π?`;
            targetElement.recipients = selectedUsers; // –ó–¥–µ—Å—å —Ç–æ–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º recipients –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
            payload = { id: targetElement.id, type: currentContextMenuType, recipients: selectedUsers, minQuantityAlert: true };
        }

        if (window.Telegram && window.Telegram.WebApp) {
            confirmed = await new Promise(resolve => {
                Telegram.WebApp.showConfirm(message, (result) => resolve(result));
            });
        } else {
            confirmed = confirm(message);
        }

        if (confirmed) {
            hideModal(recipientsModal);
            hideContextMenu();
            renderSections(currentSectionId); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø–∏–ª–∏ –≤ —Å–∏–ª—É –≤ UI

            if (window.Telegram && window.Telegram.WebApp) {
                Telegram.WebApp.sendData(JSON.stringify({
                    type: actionType,
                    payload: payload
                }));
                Telegram.WebApp.showAlert(`–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è "${targetElement.name}" –æ–±–Ω–æ–≤–ª–µ–Ω—ã.`);
            } else {
                alert(`–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è "${targetElement.name}" –æ–±–Ω–æ–≤–ª–µ–Ω—ã (—Ç–æ–ª—å–∫–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ).`);
            }
        } else {
            if (window.Telegram && window.Telegram.WebApp) {
                Telegram.WebApp.HapticFeedback.notificationOccurred('light');
            }
        }
    }
  
  // --- Task Management Functions ---
    function startLongPressTask(e, taskId) {
        clearTimeout(longPressTaskTimer);
        longPressTaskTimer = setTimeout(() => {
            currentTaskForStatusChange = allTasks.find(t => t.id === taskId);
            if (currentTaskForStatusChange) {
                showModal(taskStatusModal);
            }
        }, LONG_PRESS_TASK_THRESHOLD);
    }

    function cancelLongPressTask() {
        clearTimeout(longPressTaskTimer);
        longPressTaskTimer = null;
    }

    async function updateTaskStatus(taskId, newStatus) {
        const task = allTasks.find(t => t.id === taskId);
        if (!task) return;

        // –†–∞–∑—Ä–µ—à–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ç–æ–ª—å–∫–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∞–¥–º–∏–Ω—É –∏–ª–∏ –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ "–ù–æ–≤–∞—è" –∏ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞
        const isAssignedToCurrentUser = task.assignedTo === currentUserId;
        const isUnassignedNewTask = (!task.assignedTo || task.assignedTo === 'unassigned') && task.status === '–ù–æ–≤–∞—è';

        if (!isAdmin && !isAssignedToCurrentUser && !isUnassignedNewTask) {
            if (window.Telegram && window.Telegram.WebApp) {
                Telegram.WebApp.showAlert('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —ç—Ç–æ–π –∑–∞–¥–∞—á–∏.');
            } else {
                alert('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —ç—Ç–æ–π –∑–∞–¥–∞—á–∏.');
            }
            return;
        }

        let confirmed;
        if (window.Telegram && window.Telegram.WebApp) {
            confirmed = await new Promise(resolve => {
                Telegram.WebApp.showConfirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ "${task.title}" –Ω–∞ "${newStatus}"?`, (result) => resolve(result));
            });
        } else {
            confirmed = confirm(`–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ "${task.title}" –Ω–∞ "${newStatus}"?`);
        }

        if (confirmed) {
            task.status = newStatus;
            // –ï—Å–ª–∏ –∑–∞–¥–∞—á—É –≤–∑—è–ª –∫—Ç–æ-—Ç–æ, –∫—Ç–æ –µ—â–µ –Ω–µ –±—ã–ª –Ω–∞–∑–Ω–∞—á–µ–Ω, –∏ –æ–Ω–∞ –±—ã–ª–∞ "–ù–æ–≤–∞—è", –Ω–∞–∑–Ω–∞—á–∏—Ç—å –µ–µ –µ–º—É
            if (newStatus === '–í —Ä–∞–±–æ—Ç–µ' && (!task.assignedTo || task.assignedTo === 'unassigned')) {
                task.assignedTo = currentUserId;
            } else if (newStatus === '–ó–∞–≤–µ—Ä—à–µ–Ω–∞' || newStatus === '–û—Ç–ª–æ–∂–µ–Ω–∞') {
                // –ï—Å–ª–∏ –∑–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∏–ª–∏ –æ—Ç–ª–æ–∂–µ–Ω–∞, –º–æ–∂–Ω–æ —Å–Ω—è—Ç—å –Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∞–¥–º–∏–Ω
                // –ü–æ–∫–∞ –æ—Å—Ç–∞–≤–∏–º –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ, —á—Ç–æ–±—ã –º–æ–∂–Ω–æ –±—ã–ª–æ –≤–∏–¥–µ—Ç—å, –∫—Ç–æ –∑–∞–≤–µ—Ä—à–∏–ª/–æ—Ç–ª–æ–∂–∏–ª
                // task.assignedTo = 'unassigned';
            }

            renderTasks(document.querySelector('#tasks-page .filter-tab.active')?.dataset.filter || 'all');
            hideModal(taskStatusModal);

            if (window.Telegram && window.Telegram.WebApp) {
                Telegram.WebApp.sendData(JSON.stringify({
                    type: 'update_task_status',
                    payload: {
                        taskId: task.id,
                        status: newStatus,
                        assignedTo: task.assignedTo // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–∞–∫–∂–µ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ, –µ—Å–ª–∏ –∏–∑–º–µ–Ω–∏–ª—Å—è
                    }
                }));
                Telegram.WebApp.showAlert(`–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ "${task.title}" –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ "${newStatus}".`);
            } else {
                alert(`–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ "${task.title}" –æ–±–Ω–æ–≤–ª–µ–Ω –¥–æ "${newStatus}" (—Ç–æ–ª—å–∫–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ).`);
            }
        } else {
            if (window.Telegram && window.Telegram.WebApp) {
                Telegram.WebApp.HapticFeedback.notificationOccurred('light');
            }
        }
    }

    // --- Event Listeners ---
    settingsBtn.addEventListener('click', () => showPage('settings-page'));

    bottomNavItems.forEach(item => {
        item.addEventListener('click', function(e) {
            e.preventDefault();
            const pageId = this.dataset.page;
            showPage(pageId);
        });
    });

    // Back button for sections page
    backFromSectionBtn.addEventListener('click', () => navigateToSection(null)); // Go back to main sections

    // Admin controls for company info (for testing/demo)
    if (adminControlsPanel) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–∞–Ω–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        applyCompanyChangesBtn.addEventListener('click', async () => {
            const newName = companyNameInput.value.trim();
            const newLogoUrl = logoUrlInput.value.trim();
            if (newName || newLogoUrl) {
                let confirmed;
                if (window.Telegram && window.Telegram.WebApp) {
                    confirmed = await new Promise(resolve => {
                        Telegram.WebApp.showConfirm('–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–∏?', (result) => resolve(result));
                    });
                } else {
                    confirmed = confirm('–ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–∏?');
                }

                if (confirmed) {
                    if (newName) companyData.name = newName;
                    if (newLogoUrl) companyData.logoUrl = newLogoUrl;
                    updateCompanyInfo();
                    if (window.Telegram && window.Telegram.WebApp) {
                        Telegram.WebApp.sendData(JSON.stringify({
                            type: 'update_company_info',
                            payload: { name: newName, logoUrl: newLogoUrl }
                        }));
                        Telegram.WebApp.showAlert('–î–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.');
                    } else {
                        alert('–î–∞–Ω–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã (—Ç–æ–ª—å–∫–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ).');
                    }
                }
            } else {
                if (window.Telegram && window.Telegram.WebApp) {
                    Telegram.WebApp.showAlert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ URL –ª–æ–≥–æ—Ç–∏–ø–∞.');
                } else {
                    alert('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ URL –ª–æ–≥–æ—Ç–∏–ø–∞.');
                }
            }
        });

        applyBotLogoChangesBtn.addEventListener('click', async () => {
            const newBotLogoUrl = botLogoUrlInput.value.trim();
            if (newBotLogoUrl) {
                let confirmed;
                if (window.Telegram && window.Telegram.WebApp) {
                    confirmed = await new Promise(resolve => {
                        Telegram.WebApp.showConfirm('–ü—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–æ–≤—ã–π –ª–æ–≥–æ—Ç–∏–ø –¥–ª—è –±–æ—Ç–∞?', (result) => resolve(result));
                    });
                } else {
                    confirmed = confirm('–ü—Ä–∏–º–µ–Ω–∏—Ç—å –Ω–æ–≤—ã–π –ª–æ–≥–æ—Ç–∏–ø –¥–ª—è –±–æ—Ç–∞?');
                }

                if (confirmed) {
                    companyData.botLogoUrl = newBotLogoUrl;
                    // –ó–¥–µ—Å—å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ –±—ã–ª–æ –±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ª–æ–≥–æ—Ç–∏–ø–∞ –±–æ—Ç–∞
                    if (window.Telegram && window.Telegram.WebApp) {
                        Telegram.WebApp.sendData(JSON.stringify({
                            type: 'update_bot_logo',
                            payload: { botLogoUrl: newBotLogoUrl }
                        }));
                        Telegram.WebApp.showAlert('–õ–æ–≥–æ—Ç–∏–ø –±–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω.');
                    } else {
                        alert('–õ–æ–≥–æ—Ç–∏–ø –±–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω (—Ç–æ–ª—å–∫–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ).');
                    }
                }
            } else {
                if (window.Telegram && window.Telegram.WebApp) {
                    Telegram.WebApp.showAlert('–í–≤–µ–¥–∏—Ç–µ URL –Ω–æ–≤–æ–≥–æ –ª–æ–≥–æ—Ç–∏–ø–∞ –±–æ—Ç–∞.');
                } else {
                    alert('–í–≤–µ–¥–∏—Ç–µ URL –Ω–æ–≤–æ–≥–æ –ª–æ–≥–æ—Ç–∏–ø–∞ –±–æ—Ç–∞.');
                }
            }
        });

        addAdminNoteBtn.addEventListener('click', async () => {
            const newNote = newAdminNoteInput.value.trim();
            if (newNote) {
                let confirmed;
                if (window.Telegram && window.Telegram.WebApp) {
                    confirmed = await new Promise(resolve => {
                        Telegram.WebApp.showConfirm(`–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É "${newNote}"?`, (result) => resolve(result));
                    });
                } else {
                    confirmed = confirm(`–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É "${newNote}"?`);
                }

                if (confirmed) {
                    companyData.adminNotes.push(newNote);
                    updateAdminNotes(companyData.adminNotes);
                    newAdminNoteInput.value = '';
                    if (window.Telegram && window.Telegram.WebApp) {
                        Telegram.WebApp.sendData(JSON.stringify({
                            type: 'add_admin_note',
                            payload: { note: newNote }
                        }));
                        Telegram.WebApp.showAlert('–ó–∞–º–µ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞.');
                    } else {
                        alert('–ó–∞–º–µ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ (—Ç–æ–ª—å–∫–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ).');
                    }
                }
            } else {
                if (window.Telegram && window.Telegram.WebApp) {
                    Telegram.WebApp.showAlert('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏.');
                } else {
                    alert('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏.');
                }
            }
        });

        clearAdminNotesBtn.addEventListener('click', async () => {
            let confirmed;
            if (window.Telegram && window.Telegram.WebApp) {
                confirmed = await new Promise(resolve => {
                    Telegram.WebApp.showConfirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤?', (result) => resolve(result));
                });
            } else {
                confirmed = confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤?');
            }

            if (confirmed) {
                updateAdminNotes([]);
                if (window.Telegram && window.Telegram.WebApp) {
                    Telegram.WebApp.sendData(JSON.stringify({
                        type: 'clear_admin_notes'
                    }));
                    Telegram.WebApp.showAlert('–í—Å–µ –∑–∞–º–µ—Ç–∫–∏ —É–¥–∞–ª–µ–Ω—ã.');
                } else {
                    alert('–í—Å–µ –∑–∞–º–µ—Ç–∫–∏ —É–¥–∞–ª–µ–Ω—ã (—Ç–æ–ª—å–∫–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ).');
                }
            }
        });
    }

    // Toggle Dark Mode
    document.getElementById('toggle-dark-mode').addEventListener('click', () => {
        companyData.darkMode = !companyData.darkMode;
        document.body.classList.toggle('dark-mode', companyData.darkMode);
        if (window.Telegram && window.Telegram.WebApp) {
            Telegram.WebApp.sendData(JSON.stringify({
                type: 'toggle_dark_mode',
                payload: { darkMode: companyData.darkMode }
            }));
            Telegram.WebApp.showAlert(`–¢–µ–º–Ω—ã–π —Ä–µ–∂–∏–º ${companyData.darkMode ? '–≤–∫–ª—é—á–µ–Ω' : '–≤—ã–∫–ª—é—á–µ–Ω'}.`);
        } else {
            alert(`–¢–µ–º–Ω—ã–π —Ä–µ–∂–∏–º ${companyData.darkMode ? '–≤–∫–ª—é—á–µ–Ω' : '–≤—ã–∫–ª—é—á–µ–Ω'}.`);
        }
    });

    // Create Section / Sub-section
    createSectionBtn.addEventListener('click', () => {
        newModalTitle.textContent = '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞–∑–¥–µ–ª';
        newSectionNameInput.value = '';
        showModal(newSectionModal);
        confirmNewSectionBtn.onclick = async () => {
            const sectionName = newSectionNameInput.value.trim();
            if (sectionName) {
                createSection(sectionName, null); // –°–æ–∑–¥–∞–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π —Ä–∞–∑–¥–µ–ª
                hideModal(newSectionModal);
            } else {
                if (window.Telegram && window.Telegram.WebApp) {
                    Telegram.WebApp.showAlert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞.');
                } else {
                    alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–∞.');
                }
            }
        };
    });

    createSubSectionBtn.addEventListener('click', () => {
        newModalTitle.textContent = '–°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–¥—Ä–∞–∑–¥–µ–ª';
        newSectionNameInput.value = '';
        showModal(newSectionModal);
        confirmNewSectionBtn.onclick = async () => {
            const subSectionName = newSectionNameInput.value.trim();
            if (subSectionName) {
                createSection(subSectionName, currentSectionId); // –°–æ–∑–¥–∞–µ–º –ø–æ–¥—Ä–∞–∑–¥–µ–ª
                hideModal(newSectionModal);
            } else {
                if (window.Telegram && window.Telegram.WebApp) {
                    Telegram.WebApp.showAlert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞.');
                } else {
                    alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–¥—Ä–∞–∑–¥–µ–ª–∞.');
                }
            }
        };
    });

    // Create Item
    createItemBtn.addEventListener('click', () => {
        newModalTitle.textContent = '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é';
        newSectionNameInput.value = '';
        // –í–º–µ—Å—Ç–æ newSectionNameInput –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏
        // –∏–ª–∏ —Å–æ–∑–¥–∞–¥–∏–º –Ω–æ–≤–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–∑–∏—Ü–∏–∏ —Å –ø–æ–ª—è–º–∏ quantity/minQuantity.
        // –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã, –ø–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º editModal.
        editModalTitle.textContent = '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é';
        editNameInput.value = '';
        editQuantityInput.value = 1;
        editMinQuantityInput.value = 0;
        editItemFields.style.display = 'block';
        showModal(editModal);

        confirmEditBtn.onclick = async () => {
            const itemName = editNameInput.value.trim();
            const itemQuantity = parseInt(editQuantityInput.value);
            const itemMinQuantity = parseInt(editMinQuantityInput.value);

            if (itemName && !isNaN(itemQuantity) && itemQuantity >= 0 && !isNaN(itemMinQuantity) && itemMinQuantity >= 0) {
                createItem(itemName, currentSectionId, itemQuantity, itemMinQuantity);
                hideModal(editModal);
            } else {
                if (window.Telegram && window.Telegram.WebApp) {
                    Telegram.WebApp.showAlert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞).');
                } else {
                    alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ —á–∏—Å–ª–∞).');
                }
            }
        };
    });

    // Cancel buttons for modals
    cancelNewSectionBtn.addEventListener('click', () => hideModal(newSectionModal));
    cancelEditBtn.addEventListener('click', () => hideModal(editModal));
    cancelQuantityBtn.addEventListener('click', () => hideModal(quantityModal));
    cancelRecipientsBtn.addEventListener('click', () => hideModal(recipientsModal));
    closeTaskStatusModalBtn.addEventListener('click', () => hideModal(taskStatusModal));
    cancelCreateTaskBtn.addEventListener('click', () => hideModal(createTaskModal));

    // Quantity Modal buttons
    addQuantityBtn.addEventListener('click', async () => {
        const value = parseInt(quantityInput.value);
        if (!isNaN(value) && value > 0) {
            await updateItemQuantity(currentItem.id, value);
        } else {
            if (window.Telegram && window.Telegram.WebApp) {
                Telegram.WebApp.showAlert('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.');
            } else {
                alert('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.');
            }
        }
    });

    subtractQuantityBtn.addEventListener('click', async () => {
        const value = parseInt(quantityInput.value);
        if (!isNaN(value) && value > 0) {
            await updateItemQuantity(currentItem.id, -value);
        } else {
            if (window.Telegram && window.Telegram.WebApp) {
                Telegram.WebApp.showAlert('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.');
            } else {
                alert('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ.');
            }
        }
    });

    // Recipients Modal filter tabs
    recipientFilterTabs.forEach(tab => {
        tab.addEventListener('click', function() {
            recipientFilterTabs.forEach(t => t.classList.remove('active'));
            this.classList.add('active');
            renderUsersForSelection(this.dataset.filter);
        });
    });

    // Recipients Modal confirm button
    confirmRecipientsBtn.addEventListener('click', () => {
        if (currentContextMenuType === 'item') {
            const item = allItems.find(i => i.id === currentContextMenuTargetId);
            if (item) {
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ –ø—É–Ω–∫—Ç—É –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑–≤–∞–ª –º–æ–¥–∞–ª–∫—É
                // –≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞, –≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ —á–µ—Ä–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä
                // –ù–∞–ø—Ä–∏–º–µ—Ä, `currentContextMenuAction`
                const action = contextMenu.querySelector('.context-menu-item.active-context-action')?.dataset.action; // –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–ª–∞—Å—Å active-context-action –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –º–µ–Ω—é
                applyRecipientsChanges(action || 'remind'); // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            }
        } else if (currentContextMenuType === 'section') {
            const section = allSections.find(s => s.id === currentContextMenuTargetId);
            if (section) {
                const action = contextMenu.querySelector('.context-menu-item.active-context-action')?.dataset.action;
                applyRecipientsChanges(action || 'remind');
            }
        }
    });

    // Context Menu item click handlers
    contextMenuItems.forEach(item => {
        item.addEventListener('click', () => {
            const action = item.dataset.action;
            let targetElement;
            if (currentContextMenuType === 'section') {
                targetElement = allSections.find(s => s.id === currentContextMenuTargetId);
            } else if (currentContextMenuType === 'item') {
                targetElement = allItems.find(i => i.id === currentContextMenuTargetId);
            }

            if (!targetElement) {
                hideContextMenu();
                return;
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å, —á—Ç–æ–±—ã –∑–Ω–∞—Ç—å, –∫–∞–∫–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤—ã–∑–≤–∞–ª–æ –º–æ–¥–∞–ª–∫—É –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
            contextMenuItems.forEach(i => i.classList.remove('active-context-action'));
            item.classList.add('active-context-action');

            switch (action) {
                case 'edit':
                    if (currentContextMenuType === 'section') {
                        editSection(targetElement.id, targetElement.name);
                    } else if (currentContextMenuType === 'item') {
                        editItem(targetElement.id, targetElement.name, targetElement.quantity, targetElement.minQuantity);
                    }
                    break;
                case 'add-subtract':
                    if (currentContextMenuType === 'item') {
                        showQuantityModal(targetElement);
                    }
                    break;
                case 'min-quantity':
                    if (currentContextMenuType === 'item') {
                        showRecipientsModal(targetElement.id, 'item', targetElement.recipients, targetElement.hiddenFor);
                    }
                    break;
                case 'remind':
                    showRecipientsModal(targetElement.id, currentContextMenuType, targetElement.recipients, targetElement.hiddenFor);
                    break;
                case 'hide-from':
                    showRecipientsModal(targetElement.id, currentContextMenuType, targetElement.recipients, targetElement.hiddenFor); // Use hiddenFor array
                    break;
                case 'delete':
                    if (currentContextMenuType === 'section') {
                        deleteSection(targetElement.id);
                    } else if (currentContextMenuType === 'item') {
                        deleteItem(targetElement.id);
                    }
                    break;
            }
            hideContextMenu();
        });
    });

    // Task filter tabs
    taskFilterTabs.forEach(tab => {
        tab.addEventListener('click', function() {
            taskFilterTabs.forEach(t => t.classList.remove('active'));
            this.classList.add('active');
            renderTasks(this.dataset.filter);
        });
    });

    // Task Status Modal buttons
    taskStatusOptionButtons.forEach(button => {
        button.addEventListener('click', () => {
            if (currentTaskForStatusChange) {
                updateTaskStatus(currentTaskForStatusChange.id, button.dataset.status);
            }
        });
    });

    // Create Task Button and Modal
    createTaskBtn.addEventListener('click', () => {
        taskTitleInput.value = '';
        taskDescriptionInput.value = '';
        taskAssignedToSelect.innerHTML = '<option value="">–ù–∞–∑–Ω–∞—á–∏—Ç—å (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</option>';

        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
        allUsers.forEach(user => {
            const option = document.createElement('option');
            option.value = user.id;
            option.textContent = user.name;
            taskAssignedToSelect.appendChild(option);
        });
        showModal(createTaskModal);
    });

    confirmCreateTaskBtn.addEventListener('click', async () => {
        const title = taskTitleInput.value.trim();
        const description = taskDescriptionInput.value.trim();
        const assignedTo = taskAssignedToSelect.value || 'unassigned'; // –ï—Å–ª–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ, —Ç–æ 'unassigned'

        if (!title) {
            if (window.Telegram && window.Telegram.WebApp) {
                Telegram.WebApp.showAlert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏.');
            } else {
                alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏.');
            }
            return;
        }

        let confirmed;
        if (window.Telegram && window.Telegram.WebApp) {
            confirmed = await new Promise(resolve => {
                Telegram.WebApp.showConfirm(`–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É "${title}"?`, (result) => resolve(result));
            });
        } else {
            confirmed = confirm(`–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É "${title}"?`);
        }

        if (confirmed) {
            const newTask = {
                id: generateUniqueId(),
                title: title,
                description: description,
                assignedTo: assignedTo,
                status: '–ù–æ–≤–∞—è'
            };
            allTasks.push(newTask);
            renderTasks(document.querySelector('#tasks-page .filter-tab.active')?.dataset.filter || 'all');
            hideModal(createTaskModal);

            if (window.Telegram && window.Telegram.WebApp) {
                Telegram.WebApp.sendData(JSON.stringify({
                    type: 'create_task',
                    payload: newTask
                }));
                Telegram.WebApp.showAlert(`–ó–∞–¥–∞—á–∞ "${title}" —Å–æ–∑–¥–∞–Ω–∞.`);
            } else {
                alert(`–ó–∞–¥–∞—á–∞ "${title}" —Å–æ–∑–¥–∞–Ω–∞ (—Ç–æ–ª—å–∫–æ –≤ –±—Ä–∞—É–∑–µ—Ä–µ).`);
            }
        } else {
            if (window.Telegram && window.Telegram.WebApp) {
                Telegram.WebApp.HapticFeedback.notificationOccurred('light');
            }
        }
    });

    // Initial setup
    updateCompanyInfo();
    updateAdminNotes(companyData.adminNotes);
    renderSections(null); // Load main sections
    renderTasks('all'); // Load all tasks initially

    // Set admin panel visibility
    if (isAdmin) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
        adminControlsPanel.style.display = 'flex';
        createSectionBtn.style.display = 'block';
        if (isMainAdmin) {
            downloadReportsBtn.style.display = 'block';
            filterAdminsTab.style.display = 'block'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∫–ª–∞–¥–∫—É "–ê–¥–º–∏–Ω—ã" —Ç–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω–æ–º—É –∞–¥–º–∏–Ω—É
        } else {
            downloadReportsBtn.style.display = 'none';
            filterAdminsTab.style.display = 'none';
        }
        createTaskBtn.style.display = 'block'; // –ö–Ω–æ–ø–∫–∞ "–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É" –≤–∏–¥–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º
    } else {
        adminControlsPanel.style.display = 'none';
        createSectionBtn.style.display = 'none';
        downloadReportsBtn.style.display = 'none';
        createSubSectionBtn.style.display = 'none';
        createItemBtn.style.display = 'none';
        createTaskBtn.style.display = 'none';
        filterAdminsTab.style.display = 'none';
    }


    // Initialize Telegram Web App
    if (window.Telegram && window.Telegram.WebApp) {
        Telegram.WebApp.ready();
        Telegram.WebApp.expand(); // –†–∞–∑–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω

        // –ü—Ä–∏–º–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Telegram (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è user_id, role –∏ —Ç.–¥.)
        const initData = Telegram.WebApp.initDataUnsafe;
        if (initData && initData.user) {
            // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ –±—ã–ª–æ –±—ã –æ–±–Ω–æ–≤–∏—Ç—å currentUserId –∏ currentUserRole
            // –ù–∞–ø—Ä–∏–º–µ—Ä: currentUserId = initData.user.id.toString();
            // –ü–æ–ª—É—á–∏—Ç—å —Ä–æ–ª—å —Å —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ initData.user.id
            // const userFromTelegram = allUsers.find(u => u.id === initData.user.id.toString());
            // if (userFromTelegram) {
            //     currentUserId = userFromTelegram.id;
            //     currentUserRole = userFromTelegram.role;
            // }
            // console.log('Telegram User:', initData.user);
        }

        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è Web App
        Telegram.WebApp.onEvent('mainButtonClicked', () => {
            Telegram.WebApp.showConfirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ?', (confirmed) => {
                if (confirmed) {
                    Telegram.WebApp.close();
                }
            });
        });

        Telegram.WebApp.setHeaderColor('#ffffff'); // –ü—Ä–∏–º–µ—Ä —Ü–≤–µ—Ç–∞ —à–∞–ø–∫–∏
        Telegram.WebApp.setBackgroundColor('#f8f9fa'); // –ü—Ä–∏–º–µ—Ä —Ü–≤–µ—Ç–∞ —Ñ–æ–Ω–∞
    }
});